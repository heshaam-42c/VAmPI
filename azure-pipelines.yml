# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  platformUrl: 'https://demolabs.42crunch.cloud'
  platformService: 'services.demolabs.42crunch.cloud:8001'
  config_name: azureDevOps
  github_org_name: heshaam-42c
  github_repo_name: VAmPI
  github_branch_name: master
  
steps:
- task: UsePythonVersion@0
  displayName: Install Python
  inputs:
    versionSpec: '3.11'
    addToPath: true
    architecture:  x64

# Install python requests library
- script: python -m pip install requests --upgrade pip
  displayName: 'Install tools'

# Fetching additional OAS file using wget
- script: |
    # az apim api export -g customer-pocs -n api-42c-demo --api-id photomanager --export-format OpenApiJsonFile --file-path $(Build.Repository.LocalPath)
    # wget https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/heads/main/examples/v3.0/api-with-examples.yaml
    wget 'https://www.dropbox.com/scl/fi/55djk9nj7vg9pkd1qzvte/tailwind-products-manager_openapi.yaml?rlkey=ojox2ba41a191wqxm5hzjzaik&st=7kvgdmku&dl=0'
    mv tailwind-products-manager_openapi.yaml\?rlkey=ojox2ba41a191wqxm5hzjzaik\&st=7kvgdmku\&dl=0 tailwind-products-manager_openapi.yaml
    pwd
    ls -la

# Start the API using Docker Compose
- task: DockerCompose@1
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: '$(Build.Repository.LocalPath)/docker-compose.yaml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'up -d'
    projectName: 'vampi_hesh'

# Wait for the containers to start and populate the database
- script: |
    echo "Waiting for containers to start..."
    sleep 5
    echo "Populating the database..."
    docker ps -a
    curl http://localhost:5002/createdb

    VAMPI_token=$(curl -sv -X POST -d '{"username": "admin","password": "pass1"}' -H 'Content-Type: application/json' -H 'Accept: application/json' http://localhost:5002/users/v1/login | jq -r '.auth_token')

    echo "VAmPI API Token: $VAMPI_token"
    echo "##vso[task.setvariable variable=VAMPI_token]$VAMPI_token"

# 42Crunch API Security Audit
- task: APIContractSecurityAudit@5
  displayName: Auditing OAS Files
  inputs:
    platformServiceConnection: '42Crunch ADO Token'
    minScore: '75'
    logLevel: DEBUG
    defaultCollectionName: 'AzureDevOps heshaam-42c/VAmPI--master'
    ignoreFailures: 'true'
    jsonReport: 'audit-action-report-$(Build.BuildId).json'
    sarifReport: 'audit-report-$(Build.BuildId).sarif'

# 42Crunch Freemium API Security Audit
# - task: APISecurityAuditFreemium@1
#   inputs:
#     enforceSQG: false
#     logLevel: DEBUG
#     sarifReport: '$(Build.Repository.LocalPath)/$(Build.BuildId)-auditreport.sarif'
#     exportAsPDF: '$(Build.Repository.LocalPath)/$(Build.BuildId)-auditreport.pdf'

# Publish SARIF Artifact
- task: PublishBuildArtifacts@1
  displayName: 'publishAuditSarif'
  inputs:
    PathtoPublish: '$(Build.Repository.LocalPath)/audit-report-$(Build.BuildId).sarif'
    ArtifactName: 'CodeAnalysisLogs'
    publishLocation: 'Container'

# Compress & Base64 encode the sarif file
- script: |
    sarif_file_base64=$(gzip -c $(Build.Repository.LocalPath)/audit-report-$(Build.BuildId).sarif | base64 -w0)
    echo "##vso[task.setvariable variable=AUDIT_SARIF_FILE]$sarif_file_base64"
  displayName: 'Compress & Base64 encode sarif file'

# Upload SARIF report to GitHub Advanced Security (GHAS)
- task: Bash@3
  displayName: 'Upload SARIF report to GitHub Advanced Security (GHAS)'
  inputs:
    targetType: 'inline'
    script: |
      echo "Uploading SARIF report to GitHub Advanced Security (GHAS)"
      echo "Request body: {\"commit_sha\":\"$(Build.SourceVersion)\",\"ref\":\"refs/heads/$(github_branch_name)\",\"sarif\":\"$(AUDIT_SARIF_FILE)\"}"
      curl -L \
      -H "Authorization: Bearer $(GITHUB_TOKEN)" \
      -H "Accept: application/vnd.github.v3+json" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      https://api.github.com/repos/$(github_org_name)/$(github_repo_name)/code-scanning/sarifs \
      -d '{"commit_sha":"$(Build.SourceVersion)","ref":"refs/heads/$(github_branch_name)","sarif":"$(AUDIT_SARIF_FILE)"}'

# Required: Fetch API UUID from the Audit summary report
- task: CmdLine@2
  displayName: 'Check Audit Summary Report'
  inputs:
    script: |
      echo "Audit JSON Report:"
      cat $(Build.Repository.LocalPath)/audit-action-report-$(Build.BuildId).json

      apiId=$(cat $(Build.Repository.LocalPath)/audit-action-report-$(Build.BuildId).json | jq -r '.audit.report."openapi_specs/VAmPI_remediated.json".apiId')
      
      printf "\n"
      echo "VAmPI API UUID: $apiId"
      echo "##vso[task.setvariable variable=API_UUID]$apiId"

# Required: Fetch API AliasId from the .42c/conf.yaml
- task: CmdLine@2
  displayName: 'Fetch API AliasId'
  inputs:
    script: |
      echo "Audit JSON Report:"
      cat $(Build.Repository.LocalPath)/.42c/conf.yaml

      aliasId=$(cat $(Build.Repository.LocalPath)/.42c/conf.yaml | yq '.apis.["openapi_specs/VAmPI_remediated.json"].alias')

      printf "\n"
      echo "VAmPI API AliasId: $aliasId"
      echo "##vso[task.setvariable variable=API_ALIAS_ID]$aliasId"

# Upload Scan V2 Configuration from file
- task: PythonScript@0
  name: uploadscanconfig
  displayName: Update Scan V2 Configuration
  inputs:
    scriptSource: 'filePath' # Options: filePath, inline
    scriptPath: $(Build.Repository.LocalPath)/.42c/scripts/conformance_scanv2.py
    #script: # Required when scriptSource == inline
    arguments: -c $(42C_API_TOKEN) -p $(platformUrl) -a $(API_UUID) -n $(config_name) -t scan_token.json -f $(Build.Repository.LocalPath)/.42c/scan/$(API_ALIAS_ID)/scanconf.json --action upload_conf

# Save Scan Token to a variable
- task: CmdLine@2
  displayName: 'Check Scan V2 Configuration'
  name: savescanconfig
  inputs:
    script: |
      scan_content=$(cat $(Build.Repository.LocalPath)/scan_token.json | jq -r '.scan_token')
      scan_token=$(echo $scan_content | cut -d',' -f1)
      echo "Scan V2 Token: $scan_token"
      echo "##vso[task.setvariable variable=SCANV2_TOKEN;isoutput=true]$scan_token"

# Run API Conformance Scan using Docker
- script: |
    docker pull 42crunch/scand-agent:v2
    docker run --network=host -e SCAN_TOKEN=$(savescanconfig.SCANV2_TOKEN) -e SCAN42C_HOST=http://localhost:5002 -e PLATFORM_SERVICE=$(platformService) 42crunch/scand-agent:v2
    echo "Scan report: $(platformUrl)/apis/$(API_UUID)/scan"
  displayName: 'Pull and Run 42Crunch Docker Image'

# # 42Crunch API Security Scan (Freemium)
# - task: APISecurityScanFreemium@1
#   inputs:
#     sarifReport: 'scan-report-$(Build.BuildId).sarif'
#     apiCredential: 'Bearer $(VAMPI_token)'
#     apiDefinition: '$(Build.Repository.LocalPath)/openapi_specs/VAmPI_remediated.json'
#     targetURL: 'http://localhost:5002'
#     logLevel: DEBUG
#     scanReport: 'scan-report-$(Build.BuildId).json'

# # Publish SARIF Artifact
# - task: PublishBuildArtifacts@1
#   displayName: 'publishScanSarif'
#   inputs:
#     PathtoPublish: '$(Build.Repository.LocalPath)/scan-report-$(Build.BuildId).sarif'
#     ArtifactName: 'CodeAnalysisLogs'
#     publishLocation: 'Container'