# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  github_org_name: heshaam-42c
  github_repo_name: VAmPI
  github_branch_name: master
  
steps:
- task: UsePythonVersion@0
  displayName: Install Python
  inputs:
    versionSpec: '3.11'
    addToPath: true
    architecture:  x64

- script: |
    # az apim api export -g customer-pocs -n api-42c-demo --api-id photomanager --export-format OpenApiJsonFile --file-path $(Build.Repository.LocalPath)
    # wget https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/heads/main/examples/v3.0/api-with-examples.yaml
    wget 'https://www.dropbox.com/scl/fi/55djk9nj7vg9pkd1qzvte/tailwind-products-manager_openapi.yaml?rlkey=ojox2ba41a191wqxm5hzjzaik&st=7kvgdmku&dl=0'
    mv tailwind-products-manager_openapi.yaml\?rlkey=ojox2ba41a191wqxm5hzjzaik\&st=7kvgdmku\&dl=0 tailwind-products-manager_openapi.yaml
    pwd
    ls -la

# 42Crunch API Security Audit
- task: APIContractSecurityAudit@5
  displayName: Auditing OAS Files
  inputs:
    platformServiceConnection: '42Crunch ADO Token'
    minScore: '75'
    logLevel: DEBUG
    defaultCollectionName: 'AzureDevOps heshaam-42c/VAmPI--master'
    ignoreFailures: 'true'
    sarifReport: 'audit-report-$(Build.BuildId).sarif'

# 42Crunch Freemium API Security Audit
# - task: APISecurityAuditFreemium@1
#   inputs:
#     enforceSQG: false
#     logLevel: DEBUG
#     sarifReport: '$(Build.Repository.LocalPath)/$(Build.BuildId)-auditreport.sarif'
#     exportAsPDF: '$(Build.Repository.LocalPath)/$(Build.BuildId)-auditreport.pdf'

# Publish SARIF Artifact
- task: PublishBuildArtifacts@1
  displayName: 'publishAuditSarif'
  inputs:
    PathtoPublish: '$(Build.Repository.LocalPath)/audit-report-$(Build.BuildId).sarif'
    ArtifactName: 'CodeAnalysisLogs'
    publishLocation: 'Container'

# Compress & Base64 encode the sarif file
- script: |
    sarif_file_base64=$(gzip -c $(Build.Repository.LocalPath)/audit-report-$(Build.BuildId).sarif | base64 -w0)
    echo "##vso[task.setvariable variable=AUDIT_SARIF_FILE]$sarif_file_base64"
  displayName: 'Compress & Base64 encode sarif file'

# Upload SARIF report to GitHub Advanced Security (GHAS)
- task: Bash@3
  displayName: 'Upload SARIF report to GitHub Advanced Security (GHAS)'
  inputs:
    targetType: 'inline'
    script: |
      echo "Uploading SARIF report to GitHub Advanced Security (GHAS)"
      echo "Request body: {\"commit_sha\":\"$(Build.SourceVersion)\",\"ref\":\"refs/heads/$(github_branch_name)\",\"sarif\":\"$(AUDIT_SARIF_FILE)\"}"
      curl -L \
      -H "Authorization: Bearer $(GITHUB_TOKEN)" \
      -H "Accept: application/vnd.github.v3+json" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      https://api.github.com/repos/$(github_org_name)/$(github_repo_name)/code-scanning/sarifs \
      -d '{"commit_sha":"$(Build.SourceVersion)","ref":"refs/heads/$(github_branch_name)","sarif":"$(AUDIT_SARIF_FILE)"}'